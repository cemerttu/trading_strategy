>Put the pullback
>Put the 60 and 40 level.
>put the 60 level is a selling point and 40 level is buy point.
>pu the 70 level to be buy and 30 level to be sell.






>tell the chart gpt that: how can you put oscillator has a revesals.






//@version=5
indicator("RSI Pullback with 60/40 Bias & Reversal Detection", shorttitle="RSI Pullback 60/40 + Reversals", overlay=false)

// === INPUTS ===
rsiLength     = input.int(14, title="RSI Length", minval=1)
maLength      = input.int(9, title="RSI MA Length", minval=1)
pullbackBars  = input.int(5, title="Pullback Lookback Bars", minval=1)
bullLevel     = input.float(60.0, title="Bullish Level", step=0.1)
bearLevel     = input.float(40.0, title="Bearish Level", step=0.1)

// === CALCULATIONS ===
rsi   = ta.rsi(close, rsiLength)      // Fast RSI
rsiMA = ta.ema(rsi, maLength)         // Slow RSI (EMA)

// === BASE CROSS CONDITIONS WITH 60/40 FILTER ===
baseBullCross = ta.crossover(rsi, rsiMA) and rsi > bullLevel
baseBearCross = ta.crossunder(rsi, rsiMA) and rsi < bearLevel

// === PULLBACK FILTER ===
bullPullback = ta.lowest(rsi - rsiMA, pullbackBars) < 0
bearPullback = ta.highest(rsi - rsiMA, pullbackBars) > 0

// === FINAL SIGNALS (Cross + Pullback) ===
bullSignal = baseBullCross and bullPullback
bearSignal = baseBearCross and bearPullback

// === REVERSAL DETECTION BASED ON RSI MA SLOPE ===
maSlopeUp   = rsiMA > rsiMA[1] and rsiMA[1] <= rsiMA[2] // turning up
maSlopeDown = rsiMA < rsiMA[1] and rsiMA[1] >= rsiMA[2] // turning down

// === PLOTS ===
plot(rsi, "RSI", color=color.blue)
plot(rsiMA, "RSI MA", color=color.orange, linewidth=2)
hOB = hline(70, "Overbought", color=color.red)
hOS = hline(30, "Oversold", color=color.green)
hBull = hline(bullLevel, "Bullish Bias", color=color.new(color.green, 0))
hBear = hline(bearLevel, "Bearish Bias", color=color.new(color.red, 0))
fill(hOB, hOS, color.rgb(192, 192, 192, 90))

// === VISUAL MARKERS ===
// Pullback continuation entries
plotshape(bullSignal, title="RSI Buy", location=location.bottom, style=shape.triangleup, color=color.green, size=size.small, text="BUY")
plotshape(bearSignal, title="RSI Sell", location=location.top, style=shape.triangledown, color=color.red, size=size.small, text="SELL")

// Reversal markers (RSI MA turning direction)
plotshape(maSlopeUp, title="RSI MA Turning Up", location=location.bottom, style=shape.diamond, color=color.blue, size=size.tiny, text="REV UP")
plotshape(maSlopeDown, title="RSI MA Turning Down", location=location.top, style=shape.diamond, color=color.orange, size=size.tiny, text="REV DN")

// === ALERT CONDITIONS ===
alertcondition(bullSignal, title="RSI Bullish Pullback Entry", message="RSI crossed above its MA while above 60 after a pullback — BUY signal!")
alertcondition(bearSignal, title="RSI Bearish Pullback Entry", message="RSI crossed below its MA while below 40 after a pullback — SELL signal!")
alertcondition(maSlopeUp, title="RSI MA Upward Reversal", message="RSI MA has turned upward — possible bullish reversal.")
alertcondition(maSlopeDown, title="RSI MA Downward Reversal", message="RSI MA has turned downward — possible bearish reversal.")





















//@version=5
indicator("Zero-Lag Trend Level", shorttitle="ZLTL", overlay=true, precision=5)

// === Inputs ===
length      = input.int(34, "Trend Length", minval=2)
src         = input.source(close, "Source")
sensitivity = input.float(2.0, "Sensitivity", minval=0.5, step=0.1)
showBG      = input.bool(true, "Shade Bull/Bear Zones")
showArrows  = input.bool(true, "Show Trend Change Arrows")

// === Zero-Lag Calculation ===
// Zero-Lag EMA formula: EMA(src + (src - EMA(src, len)) * sensitivity, len)
ema1 = ta.ema(src, length)
zlema_raw = ta.ema(src + (src - ema1) * sensitivity, length)

// Smooth a bit to avoid too much noise
zlema = ta.ema(zlema_raw, math.max(2, int(length / 3)))

// === Trend Detection ===
trendUp = zlema > zlema[1]
trendDn = zlema < zlema[1]

// === Colors ===
col = trendUp ? color.new(color.teal, 0) : color.new(color.red, 0)

// === Plotting ===
plot(zlema, "Zero-Lag Trend Level", color=col, linewidth=2)

// Background shading
bgcolor(showBG ? (trendUp ? color.new(color.teal, 92) : color.new(color.red, 92)) : na)

// Arrows for trend change (kept in global scope with ternary)
plotshape(showArrows and ta.crossover(zlema, zlema[1]), title="Trend Up", style=shape.triangleup, location=location.belowbar, color=color.teal, size=size.tiny, text="▲")
plotshape(showArrows and ta.crossunder(zlema, zlema[1]), title="Trend Down", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.tiny, text="▼")


















//@version=5
indicator("Adaptive Pullback Oscillator (APO)", shorttitle="APO", overlay=false, precision=2)

// === Inputs ===
src         = input.source(close, "Source")
rsiLen      = input.int(14, "RSI Length", minval=2)
stochLen    = input.int(14, "Stochastic Length", minval=3)
rocLen      = input.int(10, "ROC Length (Momentum)", minval=2)
normLookback= input.int(100, "Normalization Lookback", minval=20)
wRSI        = input.float(0.40, "Weight: RSI", minval=0, maxval=1, step=0.05)
wStoch      = input.float(0.40, "Weight: Stochastic", minval=0, maxval=1, step=0.05)
wMom        = input.float(0.20, "Weight: Momentum", minval=0, maxval=1, step=0.05)
smoothLen   = input.int(5, "Smoothing Length", minval=1)
lowLag      = input.bool(true, "Use Low-Lag (HMA-style) Smoothing?")
signalLen   = input.int(3, "Signal (Change) Smoothing", minval=1)

// Bands & visuals
upperBand   = input.float(60.0, "Upper Band")
lowerBand   = input.float(40.0, "Lower Band")
midline     = 50.0
showBG      = input.bool(true, "Shade Bull/Bear Zones")
showDiv     = input.bool(true, "Show Simple Divergence (experimental)")

// === Components ===
// RSI [0..100]
rsi = ta.rsi(src, rsiLen)

// Stochastic %K [0..100]
ll  = ta.lowest(low, stochLen)
hh  = ta.highest(high, stochLen)
stoch = hh == ll ? 50.0 : (src - ll) / (hh - ll) * 100.0

// Momentum (ROC) normalized to [0..100]
roc = 100.0 * (src - src[rocLen]) / nz(src[rocLen], src)
rocLL = ta.lowest(roc, normLookback)
rocHH = ta.highest(roc, normLookback)
momNorm = rocHH == rocLL ? 50.0 : (roc - rocLL) / (rocHH - rocLL) * 100.0

// Normalize weights to sum to 1
wSum = math.max(wRSI + wStoch + wMom, 0.0001)
wr = wRSI / wSum
ws = wStoch / wSum
wm = wMom / wSum

raw = wr * rsi + ws * stoch + wm * momNorm

// === Smoothing ===
emaSm(x, l) => ta.ema(x, l)
hmaLike(x, l) =>
    l2 = math.max(int(math.floor(l/2)), 1)
    s1 = ta.ema(x, l2)
    s2 = ta.ema(x, l)
    core = 2.0 * s1 - s2
    ta.ema(core, math.max(int(math.round(math.sqrt(l))), 1))

smooth = lowLag ? hmaLike(raw, smoothLen) : emaSm(raw, smoothLen)

// Signal bias
ch   = ta.change(smooth)
bias = ta.ema(ch, signalLen)

// Clamp to [0..100]
osc = math.min(math.max(smooth, 0.0), 100.0)

// === Signals ===
bull = osc > upperBand
bear = osc < lowerBand
biasUp = bias >= 0
biasDn = bias < 0
crossUp60   = ta.crossover(osc, upperBand)
crossDn40   = ta.crossunder(osc, lowerBand)
crossMidUp  = ta.crossover(osc, midline)
crossMidDn  = ta.crossunder(osc, midline)

// === Plotting ===
col = biasUp ? color.new(color.teal, 0) : color.new(color.red, 0)
plot(osc, "APO", color=col, linewidth=2)
h60 = hline(upperBand, "Upper", color=color.new(color.gray, 60))
h50 = hline(midline,    "Mid",   color=color.new(color.gray, 80))
h40 = hline(lowerBand, "Lower", color=color.new(color.gray, 60))

fill(h60, h50, color=color.new(color.teal, 92))
fill(h50, h40, color=color.new(color.red, 92))

plotshape(crossUp60, title="Cross Above 60", style=shape.triangleup, location=location.bottom, size=size.tiny, color=color.teal, text="↑60")
plotshape(crossDn40, title="Cross Below 40", style=shape.triangledown, location=location.top, size=size.tiny, color=color.red, text="↓40")
plotshape(crossMidUp, title="Cross Above 50", style=shape.circle, location=location.bottom, size=size.tiny, color=color.new(color.teal, 0), text="↑50")
plotshape(crossMidDn, title="Cross Below 50", style=shape.circle, location=location.top, size=size.tiny, color=color.new(color.red, 0), text="↓50")

// Background shading fix: keep in global scope
bgcolor(showBG ? (osc >= midline ? color.new(color.teal, 94) : color.new(color.red, 94)) : na)

// === Simple divergence (optional) ===
divLen = 5
pricePH = ta.pivothigh(high, divLen, divLen)
pricePL = ta.pivotlow(low,  divLen, divLen)
oscPH   = ta.pivothigh(osc,  divLen, divLen)
oscPL   = ta.pivotlow(osc,   divLen, divLen)

bearDiv = showDiv and not na(pricePH) and not na(oscPH) and high[divLen] > high[divLen*2] and osc[divLen] < osc[divLen*2]
bullDiv = showDiv and not na(pricePL) and not na(oscPL) and low[divLen]  < low[divLen*2]  and osc[divLen] > osc[divLen*2]

plotshape(bearDiv, title="Bearish Div", location=location.top,   style=shape.labeldown, color=color.new(color.red, 0),   text="Bear Div",  offset=-divLen)
plotshape(bullDiv, title="Bullish Div", location=location.bottom,style=shape.labelup,   color=color.new(color.teal, 0),  text="Bull Div", offset=-divLen)

























Alright — let’s break this one down in plain language so you know exactly what’s happening under the hood.

This oscillator I made is called **APO (Adaptive Pullback Oscillator)**.
It’s a custom blend of **RSI**, **Stochastic**, and a **momentum measure**, all normalized to the same scale (0–100).

---

## **1️⃣ Inputs**

At the top, you have settings to tweak:

* **`src`** → Which price to measure from (close, open, hl2, etc.).
* **`rsiLen`** → RSI period.
* **`stochLen`** → Stochastic lookback.
* **`rocLen`** → Momentum lookback.
* **`normLookback`** → How far back to normalize momentum.
* **`wRSI`, `wStoch`, `wMom`** → How much weight to give each part (RSI, Stoch, Momentum).
* **`smoothLen`** → How smooth the final line should be.
* **`lowLag`** → If ON, uses HMA-like smoothing (less laggy than EMA).
* **Bands** → 40, 50, and 60 lines for overbought/oversold/trend bias.
* **`showBG`** → If ON, colors background by bull/bear bias.
* **`showDiv`** → If ON, tries to spot divergences.

---

## **2️⃣ Core Calculation**

It builds **three sub-indicators**:

1. **RSI** → measures relative strength of price moves.
2. **Stochastic %K** → measures position of current price relative to high/low range.
3. **Momentum (ROC)** → percentage change from X bars ago.

   * This gets **min-max normalized** so it also sits between 0–100.

Each one gets multiplied by your **weight** (wRSI, wStoch, wMom), then summed into one line.

---

## **3️⃣ Smoothing**

* If `lowLag = true` → It runs the raw line through an **HMA-like** filter that’s smoother and reacts faster than EMA.
* If `lowLag = false` → It just uses an EMA.

---

## **4️⃣ Oscillator Range**

The final smoothed value is clamped to **0–100**, so the bands (40, 50, 60) always mean the same thing no matter the market.

---

## **5️⃣ Signals**

* **`crossUp60`** → Oscillator moves above 60 (momentum breakout).
* **`crossDn40`** → Oscillator moves below 40 (momentum breakdown).
* **`crossMidUp`** / **`crossMidDn`** → Crosses of the midline (50) for trend bias.
* **Bias** → Positive slope (green), negative slope (red).

---

## **6️⃣ Visuals**

* **Main plot**: The oscillator line, colored green when slope is up, red when slope is down.
* **Horizontal lines**: 60 (upper), 50 (mid), 40 (lower).
* **Shaded areas**: Between 40–50 and 50–60 to highlight zones.
* **Shapes/arrows**: Mark when price crosses 60/40/midline.
* **Background color**: Optional bull/bear shading based on whether osc > 50.

---

## **7️⃣ Divergence Detection (Optional)**

It checks **pivots**:

* **Bearish divergence** → Price makes a higher high, oscillator makes a lower high.
* **Bullish divergence** → Price makes a lower low, oscillator makes a higher low.
  These get labeled on the chart as “Bull Div” or “Bear Div.”

---

## **8️⃣ How to Read It**

* **Above 60** → Strong momentum, trend continuation likely.
* **Below 40** → Weak momentum, possible continuation downward.
* **Above 50** → Bullish bias.
* **Below 50** → Bearish bias.
* **Crosses** → Use 40/60 as potential entry zones; 50 for bias shift.
* **Divergences** → Potential reversal hints, not standalone signals.

---

If you want, I can now **turn this into a full strategy** that:

* Uses APO for entry conditions.
* Sets Stop Loss / Take Profit in pips.
* Uses your Fixed / Conservative / Optimal / Aggressive risk modes.
* Shows trades + equity curve.

That way this thing goes from *indicator* → *money-making machine*.

Do you want me to wire it up like that?
